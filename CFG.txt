Terminals:
: ' " ''' """ += -= *= /= variable # , float integer string None input print ( ) str int double = + - * / ** // % len with open as content True False and or not is > < == >= <= != range if elif else for in while def class import from raise break pass continue return
Variables:
S ASSIGNMENT VAL VAR SVAL INPUT PRINT IF ELIF ELSE FOR WHILE DEF CLASS IMPORT CONTENT BINOP UNOP METHOD STRING CONTENT BOOL INBRACKET TYPE COMPARATION EXPRES RANGE RETURN RAISE FROM IF2 ELIF2 ELSE2 EXPRES2 SDEF CALLFUNCTION
Productions:
S -> S S;
S -> ASSIGNMENT;
S -> VAR = SVAL;
S -> VAR = INPUT;
S -> SVAL COMPARATION SVAL;
S -> SVAL;
S -> PRINT; 
S -> IF;
S -> FOR; 
S -> WHILE;
S -> DEF; 
S -> CLASS;
S -> IMPORT; 
S -> CONTENT;
ASSIGNMENT -> VAR += SVAL | VAR -= SVAL | VAR *= SVAL | VAR /= SVAL;
VAR -> variable;
SVAL -> VAR | SVAL BINOP SVAL | SVAL , SVAL | METHOD | STRING | float | integer | CONTENT | BOOL | INBRACKET | None | VAL | CALLFUNCTION;
CALLFUNCTION -> variable INBRACKET;
VAL -> UNOP SVAL;
INPUT -> input INBRACKET | TYPE ( INPUT ); 
PRINT -> print INBRACKET;
INBRACKET -> ( SVAL ) | ( ) | ( SVAL FOR );
TYPE -> str | float | int | double;
BINOP -> + | - | * | / | ** | // | %;
UNOP -> + | -;
STRING -> " string " | ' string ';
METHOD -> len INBRACKET;
METHOD -> with open INBRACKET as VAR | with open INBRACKET as VAR :;
CONTENT -> ''' content ''' | """ content """ | # content;
BOOL -> True | False | BOOL BOOL | BOOL and BOOL | BOOL or BOOL | not BOOL | SVAL COMPARATION SVAL | SVAL is SVAL;
COMPARATION -> > | < | == | != | <= | >=;
EXPRES -> ( BOOL ) : S | BOOL : S | BOOL : | ( BOOL ) : | ( BOOL ) : BREAK | BOOL : BREAK;
EXPRES2 -> ( BOOL ) : S | BOOL : S | BOOL : | ( BOOL ) : | ( BOOL ) : S RETURN | BOOL : S RETURN | ( BOOL ) : RETURN | BOOL : RETURN;
RANGE -> range INBRACKET;
IF -> if EXPRES | IF ELIF | IF ELSE | IF RAISE | IF BREAK | IF PASS | IF CONTINUE; 
IF2 -> if EXPRES2 | IF2 ELIF2 | IF2 ELSE2 | IF2 RAISE | IF2 BREAK | IF2 PASS | IF2 CONTINUE; 
ELIF -> elif EXPRES | ELIF ELIF | ELIF ELSE; 
ELIF2 -> elif EXPRES2 | ELIF2 ELIF2 | ELIF2 ELSE2; 
ELSE -> else : S;
ELSE2 -> else : S | else : S RETURN | else : RETURN;
FOR -> for VAR in RANGE : S | for VAR in INBRACKET : S | for VAR in VAR : S | for VAR in STRING : S; 
WHILE -> while EXPRES | while INBRACKET :;
DEF -> def VAR INBRACKET : | DEF SDEF;
SDEF -> S | SDEF SDEF | IF2 | RETURN;
CLASS -> class VAR : S;
IMPORT -> import VAR | import VAR as VAR;
FROM -> from VAR IMPORT;
RAISE -> raise INBRACKET | raise VAR INBRACKET;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
RETURN -> return BOOL | return SVAL